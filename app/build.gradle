import com.android.build.OutputFile

apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "com.github.triplet.play"
apply plugin: "kotlin-android-extensions"
apply plugin: "kotlin-kapt"

ext{
    supportLibVersion = "26.1.0"
    multiDexVersion = "1.0.2"
    // anko version
    ankoVersion = "0.10.2"
}

/**
 * Gets the release track to use for deployment
 * Release tracks are either "alpha", "beta", "production", "rollout"
 * */
def getReleaseTrack = { ->
    try{
        Properties properties = new Properties()
        properties.load(new FileInputStream("gradle.properties"))
        return properties.getProperty("RELEASE_TRACK")
    }catch (ignored){
        return "alpha"
    }
}

android {

    playAccountConfigs {
        defaultAccountConfig {
            serviceAccountEmail = rootProject.ext.serviceAccountEmail
            jsonFile = rootProject.ext.pJsonKeyFile
        }
    }

    compileSdkVersion 26
    buildToolsVersion "26.0.2"
    defaultConfig {
        applicationId "com.mydroid"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        ndk {
            abiFilters "armeabi-v7a", "x86", "mips", "x86_64", "armeabi", "arm64-v8a"
        }
        multiDexEnabled = true
    }

    /**
     * The aapt tool may inflate PNG files that have already been compressed.
     * To prevent this, you can use the cruncherEnabled flag in Gradle to disable this
     * process for PNG files:
     * */
    aaptOptions {
        cruncherEnabled = false
    }

    splits {
        abi {
            // Enables building multiple APKs per ABI.
            enable rootProject.ext.enableSeparateBuildPerCPUArchitecture
            universalApk rootProject.ext.enableUniversalApk

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86, armeabi-v7a, and mips.
            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            include "armeabi", "armeabi-v7a", "arm64-v8a", "mips", "x86", "x86_64"
        }
    }

    signingConfigs {
        release {
            keyAlias rootProject.ext.keystoreProperties["keyAlias"]
            keyPassword rootProject.ext.keystoreProperties["keyPassword"]
            storeFile rootProject.file(rootProject.ext.keystoreProperties["storeFile"])
            storePassword rootProject.ext.keystoreProperties["storePassword"]
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            debuggable false
            zipAlignEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }

        debug {
            debuggable true
            minifyEnabled false
            applicationIdSuffix ".debug"
            testCoverageEnabled true
        }
    }

    // configurations for deployment
    play {
        track = getReleaseTrack() //"alpha"
        untrackOld = true // will untrack "alpha" while upload to "beta"
        errorOnSizeLimit = false
        uploadImages = true
    }

    sourceSets {
        main {
            java.srcDirs += "src/main/kotlin"
            res.srcDirs = [
                    "src/main/res/layouts/feature_main",
                    "src/main/res/layouts/feature_mydroid",
                    "src/main/res/layouts/feature_body_parts",
                    "src/main/res/layouts/feature_master_list",
                    "src/main/res/layouts/common",
                    "src/main/res/layouts",
                    "src/main/res",
            ]
        }

        androidTest {
            java.srcDirs += "src/androidTest/kotlin"
        }

        test {
            java.srcDirs += "src/test/kotlin"
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
        unitTests.all {
            maxParallelForks = 2
            if (System.getenv().containsKey("CIRCLE_BUILD_NUM")) {
                //in CI, we have limited memory, this will allow us to refresh the VM from any memory leaks.
                forkEvery 5
            }
        }
    }

    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize "4g"
    }

    // For each APK output variant, override versionCode with a combination of
    // ext.abiCodes * 1000 + variant.versionCode. In this example, variant.versionCode
    // is equal to defaultConfig.versionCode. If you configure product flavors that
    // define their own versionCode, variant.versionCode uses that value instead.
    // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
    applicationVariants.all { variant ->

        // Assigns a different version code for each output APK
        // other than the universal APK.
        variant.outputs.all { output ->
            // Stores the value of ext.abiCodes that is associated with the ABI for this variant.
            // Determines the ABI for this variant and returns the mapped value.
            def baseAbiVersionCode = rootProject.ext.abiCodes.get(output.getFilter(OutputFile.ABI))
            // Because abiCodes.get() returns null for ABIs that are not mapped by ext.abiCodes,
            // the following code does not override the version code for universal APKs.
            // However, because we want universal APKs to have the lowest version code,
            // this outcome is desirable.
            if (baseAbiVersionCode != null) {
                // Assigns the new version code to versionCodeOverride, which changes the version code
                // for only the output APK, not for the variant itself. Skipping this step simply
                // causes Gradle to use the value of variant.versionCode for the APK.
                output.versionCodeOverride = baseAbiVersionCode * 1000 + variant.versionCode
            } else {
                // this will make sure universal apks have the lowest version code
                output.versionCodeOverride = variant.versionCode
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.android.support:appcompat-v7:$supportLibVersion"
    implementation "com.android.support:multidex:$multiDexVersion"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    // Anko Commons
    implementation "org.jetbrains.anko:anko-commons:$ankoVersion"

    // Dagger
    compileOnly "javax.annotation:jsr250-api:$javaxAnnotationVersion"
    implementation "com.google.dagger:dagger:$daggerVersion"
    implementation "javax.inject:javax.inject:$javaxInjectVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"

    // tests
    testImplementation "junit:junit:$jUnitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoCoreVersion"
    androidTestImplementation("com.android.support.test.espresso:espresso-core:$espressoVersion", {
        exclude group: "com.android.support", module: "support-annotations"
    })
    androidTestImplementation "org.mockito:mockito-android:$mockitoCoreVersion"
}
